An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.

Given an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.

 

Example 1:

Input: changed = [1,3,4,2,6,8]
Output: [1,3,4]
Explanation: One possible original array could be [1,3,4]:
- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.
Other original arrays could be [4,3,1] or [3,1,4].
Example 2:

Input: changed = [6,3,0,1]
Output: []
Explanation: changed is not a doubled array.
Example 3:

Input: changed = [1]
Output: []
Explanation: changed is not a doubled array.
 

Constraints:

1 <= changed.length <= 105
0 <= changed[i] <= 105
Accepted
110,028
Submissions
267,741
Seen this question in a real interview before?


class Solution {
    public int[] findOriginalArray(int[] changed) {
        Arrays.sort(changed);
        int l = changed.length;  //l尽量用len
        if(changed.length%2==1||changed.length==0)return new int[] {};
        else
        {
            HashMap<Integer,Integer> hm = new HashMap<>();
            int[] temp = new int[l];
            for(int i=0;i<l;i++)
            {
                if(hm.containsKey(changed[i])) //用value表示相同元素出现次数
                {
                    hm.put(changed[i], hm.get(changed[i])+1);
                }
                else hm.put(changed[i], 1);//hash表存入复数相同key会覆盖
            }
            int l2 = l/2;
            int[] ori = new int[l2];
            int count = 0;

            for(int i=0;i<l;i++)
            {
                int chun = changed[i]<<1;  //重复出现的数据，用int定义一个常量，加快速度
                if(hm.get(changed[i])>0)
                {
                    if(hm.containsKey(chun)&&hm.get(chun)>0) //检查是否存在，可以直接当if条件
                    {
                        hm.put(chun,hm.get(chun) -1);
                        hm.put(changed[i], hm.get(changed[i])-1);
                        ori[count++]=changed[i];    //不要把不同步骤分太开，容易加大工作量，ori后面再添加就很麻烦
                       
                    }    
                    else
                    {
                        return new int[] {};
                    }    
                }
                
            }

            return ori;
        
        }
    }
}
