Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104

before:Runtime: 0 ms, faster than 100.00% of Java online submissions for Search Insert Position.
Memory Usage: 44.1 MB, less than 12.66% of Java online submissions for Search Insert Position.

class Solution {
    public int searchInsert(int[] nums, int target) {
       int left=0;
        int right=nums.length-1;
        int k=(right-left)/2;
        int p=0;
        while(p==0)
        {
            if(nums[nums.length-1]<target)
            {
                p=1;
                k=nums.length-1;
                break;
            }
            if(nums[0]>=target)
            {
                p=1;
                k=-1;
                break;
            }
            if(nums[k]<target&nums[k+1]>=target)
            {
                p=1;
                break;
            }
            if(nums[k]>=target)
            {
                right = k;
                k=(right-left)/2+left;
            }
            if(nums[k]<target)
            {
                left = k;
                k=(right-left)/2+left;
            }
        }
        return k+1;
    }
}

advanced:
import java.util.Arrays;

class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0, high = nums.length - 1, mid;

        while (low <= high) {
            mid = low + (high - low) / 2;

            if (target == nums[mid]) {
                return mid;
            } else if (target > nums[mid]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}
