Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]

/*
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ll = new ArrayList<>();
        for(int i = 0; i < numRows; i++){
            List<Integer> l = new ArrayList<>();      //在循环内部建立新list就不会重复引用同一个对象
            int val = 1;
            l.add(val);
            for(int j = 0; j < i; j++){
                val  = (val * (i-j ))/(j + 1);
                l.add(val);
            }
            ll.add(l);
        }
        return ll;
    }
}
*/


class Solution {
    public List<List<Integer>> generate(int numRows) {
		List<List<Integer>> list =new ArrayList<>();  //list的使用方法不知道,用list做动态规划好点还是用数组好点
		int[][] dp=new int[numRows][numRows];
		dp[0][0]=1;
		ArrayList<Integer> l = new ArrayList<>();
		l.add(1);
		list.add((List)l.clone());  //.clone 不能用
		if(numRows==1){
			return list;
		}
		dp[1][0]=1;     //debug 溢出
		dp[1][1]=1;
		l.add(1);
		list.add((List)l.clone());
		if(numRows==2){
			return list;
		}

		for(int i=2;i<numRows;i++){
			l.clear();        //debug 不能等于null
			dp[i][0]=1;
			l.add(1);
			for(int j=1;j<i;j++){
				dp[i][j]=dp[i-1][j]+dp[i-1][j-1];
				l.add(dp[i][j]);
			}
			dp[i][i]=1;
			l.add(1);
			list.add((List)l.clone());              //debug引用的是对象，l变了list里全都变了
		}

		return list;
    }
}
