Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3

 
sliding window 
 
class Solution {
    public int lengthOfLongestSubstring(String s) {
		if(s.length()==0)return 0;
		if(s.length()==1)return 1;
		int left=0;
		int right=1;
		int temp=0;
		for(right=1;right<s.length();right++){
			for(int i=0;i<right-left;i++){
				if(s.charAt(right)==(s.charAt(left+i))){
                    temp=Math.max(temp, right-left);
					left=left+i+1;
				}}
		}
        temp=Math.max(temp,right-left);
        System.out.println(right);
		System.out.println(left);
		return temp;
    }
}

map
class Solution31 {
	public  int lengthOfLongestSubstring(String s) {
	if(s.length()==0)return 0;     //debug边界条件
	int left=0;int right=0;int count =0;
	int[] map =new int[256];
	for(right=0;right<s.length();right++){
		char c = s.charAt(right);
		if(map[c]==1){
			count=Math.max(count,right-left);
			char d= s.charAt(left);
			while(d!=c){
				left=left+1;
				map[d]--;
				d= s.charAt(left);
				}  //debug
			left=left+1;
			map[c]--;
		}
		count=Math.max(count,right-left);
		System.out.println("left"+left);
		System.out.println("right"+right);
		map[c]=map[c]+1;
	}
	count=Math.max(count,right-left);
	return 	count;
}
}
