Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109



Runtime
0 ms
Beats
100%
Memory
45.3 MB
Beats
96.92%

//一眼二分法，然后往前后找到最边上的值
class Solution47 {
    public int[] searchRange(int[] nums, int target) {
        int left=0;
		int right=nums.length-1;
		int temp=(left+right)/2;
		while(left<=right){   //可以等于
			if(nums[temp]<target){
				left=temp+1;
				temp=(left+right)/2;
			}
			else if(nums[temp]>target){
				right=temp-1;
				temp=(left+right)/2;
			}
			else if(nums[temp]==target){
				left=temp;
				right=temp;
				while(left>=0&&nums[left]==target){//注意界限
					left=left-1;
				}
				while(right<=nums.length-1&&nums[right]==target){
					right=right+1;
				}
				return new int[]{left+1,right-1};
			}
		}
		return new int[]{-1,-1};
    }
}
