Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21

Constraints:

-231 <= x <= 231 - 1

一次成功但是很慢

class Solution {
	public int reverse(int x) {
		String temp=x+"";
		String temp1="";
		int len = temp.length();
		if(temp.charAt(0)=='-'){    //解决正负问题
			temp1="-";
			for(int i=0;i<len-1;i++){
				temp1=temp1+temp.charAt(len-1-i);
			}
		}
		else{
			for(int i=0;i<len;i++){
				temp1=temp1+temp.charAt(len-1-i);
			}
		}
		long y=Long.parseLong(temp1);
		if(y>Math.pow(2, 31)-1||y<-Math.pow(2, 31))return 0;
		return Integer.parseInt(temp1);
	}
}
                    
class Solution {
	public int reverse(int x) {
		long y = 0;       
 		while(x!=0){
			y=y*10+x%10;
			x=x/10;                  //直接除  ，为什么不用管负号？  java取模出来是-10 % 3 = -1 的计算结果如下：r = -10 - (-10 / 3) * 3 = -10 - (-3 * 3) = -1。
			                         //计算器是- (-10 / 3) * 3   ，java的是不用管负号的
		}
		if(y>Integer.MAX_VALUE||y<Integer.MIN_VALUE)return 0;   //integer自带的最值
		return (int)y;
	}
}
