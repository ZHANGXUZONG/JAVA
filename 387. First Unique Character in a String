Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1
 Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.



class Solution1 {
    public int firstUniqChar(String s) {
		Queue<String> qu = new LinkedList<>();
		int tem = 0;
		for(int i=0;i<s.length();i++)
		{
			String temp = String.valueOf(s.charAt(i));
			if(qu.peek()==null||!qu.peek().equals(temp))    //字符字符串转换  ==换成equal
			{
				qu.offer(temp);
			}
			else{
				qu.poll();
				tem++;
				i=tem+1;
			}
			System.out.println(qu.peek());
			System.out.println(String.valueOf(s.charAt(i)));
		}
		if(qu.peek()==null)return -1;
		return tem;
		
    }
}

advanced:

Runtime: 2 ms, faster than 98.87% of Java online submissions for First Unique Character in a String.
Memory Usage: 42.4 MB, less than 99.13% of Java online submissions for First Unique Character in a String.
选择遍历26个字母并选择只出现了一次的，很巧妙

class Solution {
    public int firstUniqChar(String s) {
	int res = 100000;
	for(char r='a';r<='z';r++)
	{
		if(s.indexOf(r)!=-1 &&s.indexOf(r)==s.lastIndexOf(r))
		{
			res=Math.min(res, s.indexOf(r));
		}
	}
	if(res!=100000)return res;
	return -1;
    }
}
