    Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:

0 <= i, j, k, l < n
nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0
 

Example 1:

Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
Output: 2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0
Example 2:

Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]
Output: 1
    
    
    
    //思考了动态规划，感觉不太合适，关联写的哈希表，那把数据存到哈希表，怎么存？
//key 值 value 出现次数  
class Solution49 {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        int n=nums1.length;
		HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if(hm.containsKey(nums3[i]+nums4[j]))hm.put(nums3[i]+nums4[j], hm.get(nums3[i]+nums4[j])+1);
				//应该就是这句耗时太长了，map似乎比hashmap多一些方法用
				else hm.put(nums3[i]+nums4[j],1);
			}
		}
		int count =0;
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if(hm.containsKey(-(nums1[i]+nums2[j]))){
					count=count+hm.get(-(nums1[i]+nums2[j]));
				}
			}
		}
		return count;
    }
}
//有预料到速度会很慢，应该是O2但是没想到还有30%比我慢的（笑

//别人的： 思路是一样的，自己写的哈希，感觉哈希表相关问题就是自己写>用对方法>最简单的put get
class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        int[] mm1 = maxAndMin(nums1);
        int[] mm2 = maxAndMin(nums2);
        int[] mm3 = maxAndMin(nums3);
        int[] mm4 = maxAndMin(nums4);
        int n = nums1.length - 1;
        int ret = 0;
        
        int max = Math.max(mm1[1]+mm2[1], -mm3[0]-mm4[0]);
        int min = Math.min(mm1[0]+mm2[0], -mm3[1]-mm4[1]);
        
        int[] map = new int[max-min+1];
        
        for (int i: nums1) for (int j: nums2) map[i+j-min]++;
        for (int i: nums3) for (int j: nums4) ret += map[-i-j-min];
        
        return ret;
    }
    
    private int[] maxAndMin(int[] nums) {
        int max = nums[0];
        int min = nums[0];
        for (int i: nums) {
            if (i > max) max = i;
            if (i < min) min = i;
        }
        return new int[]{min, max};
    }
}
//这个慢很多但还是比我的快了一倍getOrDefault
class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        int cnt = 0;
        Map<Integer, Integer> m = new HashMap<>();
        for (int a : A) {
            for (int b : B) {
                m.put(a + b, m.getOrDefault(a + b, 0) + 1);
            }
        }
        for (int c : C) {
            for (int d : D) {
                int sum =  0-c-d;
                cnt += m.getOrDefault((sum), 0);
            }
        }
        return cnt;
    }
}
