    Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:

0 <= i, j, k, l < n
nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0
 

Example 1:

Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
Output: 2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0
Example 2:

Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]
Output: 1
    
    
    
    //思考了动态规划，感觉不太合适，关联写的哈希表，那把数据存到哈希表，怎么存？
//key 值 value 出现次数  
class Solution49 {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        int n=nums1.length;
		HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if(hm.containsKey(nums3[i]+nums4[j]))hm.put(nums3[i]+nums4[j], hm.get(nums3[i]+nums4[j])+1);
				else hm.put(nums3[i]+nums4[j],1);
			}
		}
		int count =0;
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if(hm.containsKey(-(nums1[i]+nums2[j]))){
					count=count+hm.get(-(nums1[i]+nums2[j]));
				}
			}
		}
		return count;
    }
}
//有预料到速度会很慢，应该是O2但是没想到还有30%比我慢的（笑
