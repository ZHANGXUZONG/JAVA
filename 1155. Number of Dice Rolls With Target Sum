You have n dice and each die has k faces numbered from 1 to k.

Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.
Example 2:

Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.
Example 3:

Input: n = 30, k = 30, target = 500
Output: 222616187
Explanation: The answer must be returned modulo 109 + 7.

*例子1，n=2的话，结果就是1+2，2+1，n=3的话结果是1+1+1，并没有增加，感觉从n=target开始递归会好点?减少一个筛子就多N种组合？
*例子2，n=7,1,n=6,6,n=5,5+4+3+2+1,n=4,16,n=3,

Runtime
7 ms
Beats
98.26%
Memory
41.3 MB
Beats
85.5%

class Solution {
    public int numRollsToTarget(int n, int k, int target) {
		int[][] d = new int[n+1][target+1];  //debug 多算一位
		if(target <n)return 0;
		int count = 1;
		while(count*k<target){
			count++;
		}
		if(count>n)return 0;

		for(int i=1;i<=k&&i<=target;i++){
			d[1][i]=1;
		}

		for(int i = 2;i<=n;i++){     //n
			for(int j =2;j<=target;j++){    //target
				if(i*k==j)d[i][j]=1;
				else if(i==j)d[i][j]=1;
				else{
					int temp=0;    //debug temp位置
					for(int z=j-1;z>=j-k;z--){
						if(z>=i-1&&k*(i-1)>=z){temp=d[i-1][z]+temp;temp=temp%1000000007;}  //debug到头疼发现是取模取得不对
					}
					d[i][j]=temp;
				}
			}
		}
		return d[n][target];//%1000000007
	}
} 
