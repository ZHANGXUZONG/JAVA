You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

更快，占用内存多
class Solution {
    public int maxArea(int[] height) {
        int left=0;
		int right=height.length-1;
		int max=(right-left)*Math.min(height[right], height[left]);
		while(left<right){
			if(height[right]>height[left]){
				int temp=left+1;
				while(height[temp]<height[left])temp++;
				left=temp;
				max=Math.max(max, (right-left)*Math.min(height[right], height[left]));
			}
			else if(height[right]<height[left]){
				int temp=right-1;
				while(height[temp]<height[right])temp--;
				right=temp;
				max=Math.max(max, (right-left)*Math.min(height[right], height[left]));
			}
			else{
				int temp=left+1;
				while(height[temp]<height[left])temp++;
				int temp1=right-1;
				while(height[temp1]<height[right])temp1--;
                right=temp1;
                left=temp;
                max=Math.max(max, (right-left)*Math.min(height[right], height[left]));
			}
		}
		return max;

}
}
