Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

 

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

Constraints:

1 <= s.length <= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].
Accepted
2,016,727
Submissions
3,458,801

before:

class Solution {
    public int romanToInt(String s) {
       HashMap<String,Integer> hm = new HashMap<>();
        hm.put("I",1);
        hm.put("V", 5);
        hm.put("X", 10);
        hm.put("L", 50);
        hm.put("C", 100);
        hm.put("D", 500);
        hm.put("M", 1000);
        hm.put("IV", 4);
        hm.put("IX", 9);
        hm.put("XL", 40);
        hm.put("XC", 90);
        hm.put("CD", 400);
        hm.put("CM", 900);
        int sum = 0;
        String t="";
        int count=0;
        for(int i=s.length()-1;i>=1;i--)
        {
            if(s.charAt(i-1)=='I')//判断字符相等，用单引号
            {
                if(s.charAt(i)=='V'||s.charAt(i)=='X')
                {
                   t  =s.charAt(i-1)+""+s.charAt(i)+"";
                   i--; //两个字符拼接字符串,直接相加会变int
                }
                else
                {
                    t=s.charAt(i)+"";
                }
      
            }
            else if(s.charAt(i-1)=='X')//判断字符相等，用单引号
            {
                if(s.charAt(i)=='L'||s.charAt(i)=='C')
                {
                   t  =s.charAt(i-1)+""+s.charAt(i)+"";
                   i--;  //两个字符拼接字符串
                }
                else
                {
                    t=s.charAt(i)+"";
                }
            }
            else if(s.charAt(i-1)=='C')//判断字符相等，用单引号
            {
                if(s.charAt(i)=='D'||s.charAt(i)=='M')
                {
                   t  =s.charAt(i-1)+""+s.charAt(i)+"";
                   i--;  //两个字符拼接字符串
                }
                else
                {
                    t=s.charAt(i)+"";
                }
                
            }
            else
            {
                t=s.charAt(i)+"";
            }
   
            sum+=hm.get(t);
            if(i==0)count=1;
        }
        if(count==0)
        {
            t=s.charAt(0)+"";
            sum+=hm.get(t);
        }
        return sum;
    }
}

Runtime: 29 ms, faster than 6.83% of Java online submissions for Roman to Integer.
Memory Usage: 46.4 MB, less than 44.37% of Java online submissions for Roman to Integer.

Advanced:
class Solution {
    public int romanToInt(String s) {
       HashMap<Character,Integer> hm = new HashMap<>();         //char用Character
        hm.put('I',1);                                            //改成单引号
        hm.put('V', 5);
        hm.put('X', 10);
        hm.put('L', 50);
        hm.put('C', 100);
        hm.put('D', 500);
        hm.put('M', 1000);

       int i=0,ans=0;
        while(i<s.length()){
            if(i!=s.length()-1){
                int a = hm.get(s.charAt(i));                       //不需要加”“
                int b = hm.get(s.charAt(i+1));
                if(a<b){
                    ans+=(b-a);
                    i+=2;
                }else{
                    ans+=a;
                    i++;
                }
            }else{
                ans+=hm.get(s.charAt(i));
                i++;
            }
        }
        return ans;
    
}
}




